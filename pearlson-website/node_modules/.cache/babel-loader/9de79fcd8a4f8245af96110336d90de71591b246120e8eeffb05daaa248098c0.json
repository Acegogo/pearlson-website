{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ELITEBOOK\\\\pearlson-website\\\\src\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  theme: 'light',\n  language: 'en',\n  isMenuOpen: false,\n  notifications: [],\n  user: null,\n  loading: false,\n  error: null\n};\n\n// Action types\nconst ActionTypes = {\n  SET_THEME: 'SET_THEME',\n  SET_LANGUAGE: 'SET_LANGUAGE',\n  TOGGLE_MENU: 'TOGGLE_MENU',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\n  SET_USER: 'SET_USER',\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR'\n};\n\n// Reducer\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_THEME:\n      return {\n        ...state,\n        theme: action.payload\n      };\n    case ActionTypes.SET_LANGUAGE:\n      return {\n        ...state,\n        language: action.payload\n      };\n    case ActionTypes.TOGGLE_MENU:\n      return {\n        ...state,\n        isMenuOpen: !state.isMenuOpen\n      };\n    case ActionTypes.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [...state.notifications, action.payload]\n      };\n    case ActionTypes.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(notification => notification.id !== action.payload)\n      };\n    case ActionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AppContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // Load theme from localStorage on mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      dispatch({\n        type: ActionTypes.SET_THEME,\n        payload: savedTheme\n      });\n    }\n  }, []);\n\n  // Save theme to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('theme', state.theme);\n    document.documentElement.classList.remove('light', 'dark');\n    document.documentElement.classList.add(state.theme);\n  }, [state.theme]);\n\n  // Actions\n  const actions = {\n    setTheme: theme => {\n      dispatch({\n        type: ActionTypes.SET_THEME,\n        payload: theme\n      });\n    },\n    setLanguage: language => {\n      dispatch({\n        type: ActionTypes.SET_LANGUAGE,\n        payload: language\n      });\n    },\n    toggleMenu: () => {\n      dispatch({\n        type: ActionTypes.TOGGLE_MENU\n      });\n    },\n    addNotification: notification => {\n      const id = Date.now();\n      dispatch({\n        type: ActionTypes.ADD_NOTIFICATION,\n        payload: {\n          ...notification,\n          id\n        }\n      });\n      // Auto remove notification after 5 seconds\n      setTimeout(() => {\n        dispatch({\n          type: ActionTypes.REMOVE_NOTIFICATION,\n          payload: id\n        });\n      }, 5000);\n    },\n    removeNotification: id => {\n      dispatch({\n        type: ActionTypes.REMOVE_NOTIFICATION,\n        payload: id\n      });\n    },\n    setUser: user => {\n      dispatch({\n        type: ActionTypes.SET_USER,\n        payload: user\n      });\n    },\n    setLoading: loading => {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: loading\n      });\n    },\n    setError: error => {\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: error\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      state,\n      actions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using the context\n_s(AppProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","theme","language","isMenuOpen","notifications","user","loading","error","ActionTypes","SET_THEME","SET_LANGUAGE","TOGGLE_MENU","ADD_NOTIFICATION","REMOVE_NOTIFICATION","SET_USER","SET_LOADING","SET_ERROR","reducer","state","action","type","payload","filter","notification","id","AppContext","AppProvider","children","_s","dispatch","savedTheme","localStorage","getItem","setItem","document","documentElement","classList","remove","add","actions","setTheme","setLanguage","toggleMenu","addNotification","Date","now","setTimeout","removeNotification","setUser","setLoading","setError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ELITEBOOK/pearlson-website/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  theme: 'light',\r\n  language: 'en',\r\n  isMenuOpen: false,\r\n  notifications: [],\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Action types\r\nconst ActionTypes = {\r\n  SET_THEME: 'SET_THEME',\r\n  SET_LANGUAGE: 'SET_LANGUAGE',\r\n  TOGGLE_MENU: 'TOGGLE_MENU',\r\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\r\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\r\n  SET_USER: 'SET_USER',\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_ERROR: 'SET_ERROR',\r\n};\r\n\r\n// Reducer\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_THEME:\r\n      return {\r\n        ...state,\r\n        theme: action.payload,\r\n      };\r\n    case ActionTypes.SET_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        language: action.payload,\r\n      };\r\n    case ActionTypes.TOGGLE_MENU:\r\n      return {\r\n        ...state,\r\n        isMenuOpen: !state.isMenuOpen,\r\n      };\r\n    case ActionTypes.ADD_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: [...state.notifications, action.payload],\r\n      };\r\n    case ActionTypes.REMOVE_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(\r\n          (notification) => notification.id !== action.payload\r\n        ),\r\n      };\r\n    case ActionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    case ActionTypes.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload,\r\n      };\r\n    case ActionTypes.SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst AppContext = createContext();\r\n\r\n// Provider component\r\nexport const AppProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  // Load theme from localStorage on mount\r\n  useEffect(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme) {\r\n      dispatch({ type: ActionTypes.SET_THEME, payload: savedTheme });\r\n    }\r\n  }, []);\r\n\r\n  // Save theme to localStorage when it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', state.theme);\r\n    document.documentElement.classList.remove('light', 'dark');\r\n    document.documentElement.classList.add(state.theme);\r\n  }, [state.theme]);\r\n\r\n  // Actions\r\n  const actions = {\r\n    setTheme: (theme) => {\r\n      dispatch({ type: ActionTypes.SET_THEME, payload: theme });\r\n    },\r\n    setLanguage: (language) => {\r\n      dispatch({ type: ActionTypes.SET_LANGUAGE, payload: language });\r\n    },\r\n    toggleMenu: () => {\r\n      dispatch({ type: ActionTypes.TOGGLE_MENU });\r\n    },\r\n    addNotification: (notification) => {\r\n      const id = Date.now();\r\n      dispatch({\r\n        type: ActionTypes.ADD_NOTIFICATION,\r\n        payload: { ...notification, id },\r\n      });\r\n      // Auto remove notification after 5 seconds\r\n      setTimeout(() => {\r\n        dispatch({ type: ActionTypes.REMOVE_NOTIFICATION, payload: id });\r\n      }, 5000);\r\n    },\r\n    removeNotification: (id) => {\r\n      dispatch({ type: ActionTypes.REMOVE_NOTIFICATION, payload: id });\r\n    },\r\n    setUser: (user) => {\r\n      dispatch({ type: ActionTypes.SET_USER, payload: user });\r\n    },\r\n    setLoading: (loading) => {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: loading });\r\n    },\r\n    setError: (error) => {\r\n      dispatch({ type: ActionTypes.SET_ERROR, payload: error });\r\n    },\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={{ state, actions }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using the context\r\nexport const useApp = () => {\r\n  const context = useContext(AppContext);\r\n  if (!context) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AppContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE/E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE,IAAI;EACdC,UAAU,EAAE,KAAK;EACjBC,aAAa,EAAE,EAAE;EACjBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG;EAClBC,SAAS,EAAE,WAAW;EACtBC,YAAY,EAAE,cAAc;EAC5BC,WAAW,EAAE,aAAa;EAC1BC,gBAAgB,EAAE,kBAAkB;EACpCC,mBAAmB,EAAE,qBAAqB;EAC1CC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE;AACb,CAAC;;AAED;AACA,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACjC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKZ,WAAW,CAACC,SAAS;MACxB,OAAO;QACL,GAAGS,KAAK;QACRjB,KAAK,EAAEkB,MAAM,CAACE;MAChB,CAAC;IACH,KAAKb,WAAW,CAACE,YAAY;MAC3B,OAAO;QACL,GAAGQ,KAAK;QACRhB,QAAQ,EAAEiB,MAAM,CAACE;MACnB,CAAC;IACH,KAAKb,WAAW,CAACG,WAAW;MAC1B,OAAO;QACL,GAAGO,KAAK;QACRf,UAAU,EAAE,CAACe,KAAK,CAACf;MACrB,CAAC;IACH,KAAKK,WAAW,CAACI,gBAAgB;MAC/B,OAAO;QACL,GAAGM,KAAK;QACRd,aAAa,EAAE,CAAC,GAAGc,KAAK,CAACd,aAAa,EAAEe,MAAM,CAACE,OAAO;MACxD,CAAC;IACH,KAAKb,WAAW,CAACK,mBAAmB;MAClC,OAAO;QACL,GAAGK,KAAK;QACRd,aAAa,EAAEc,KAAK,CAACd,aAAa,CAACkB,MAAM,CACtCC,YAAY,IAAKA,YAAY,CAACC,EAAE,KAAKL,MAAM,CAACE,OAC/C;MACF,CAAC;IACH,KAAKb,WAAW,CAACM,QAAQ;MACvB,OAAO;QACL,GAAGI,KAAK;QACRb,IAAI,EAAEc,MAAM,CAACE;MACf,CAAC;IACH,KAAKb,WAAW,CAACO,WAAW;MAC1B,OAAO;QACL,GAAGG,KAAK;QACRZ,OAAO,EAAEa,MAAM,CAACE;MAClB,CAAC;IACH,KAAKb,WAAW,CAACQ,SAAS;MACxB,OAAO;QACL,GAAGE,KAAK;QACRX,KAAK,EAAEY,MAAM,CAACE;MAChB,CAAC;IACH;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMO,UAAU,gBAAG/B,aAAa,CAAC,CAAC;;AAElC;AACA,OAAO,MAAMgC,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACV,KAAK,EAAEW,QAAQ,CAAC,GAAGjC,UAAU,CAACqB,OAAO,EAAEjB,YAAY,CAAC;;EAE3D;EACAH,SAAS,CAAC,MAAM;IACd,MAAMiC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACdD,QAAQ,CAAC;QAAET,IAAI,EAAEZ,WAAW,CAACC,SAAS;QAAEY,OAAO,EAAES;MAAW,CAAC,CAAC;IAChE;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAjC,SAAS,CAAC,MAAM;IACdkC,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEf,KAAK,CAACjB,KAAK,CAAC;IAC1CiC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;IAC1DH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAACpB,KAAK,CAACjB,KAAK,CAAC;EACrD,CAAC,EAAE,CAACiB,KAAK,CAACjB,KAAK,CAAC,CAAC;;EAEjB;EACA,MAAMsC,OAAO,GAAG;IACdC,QAAQ,EAAGvC,KAAK,IAAK;MACnB4B,QAAQ,CAAC;QAAET,IAAI,EAAEZ,WAAW,CAACC,SAAS;QAAEY,OAAO,EAAEpB;MAAM,CAAC,CAAC;IAC3D,CAAC;IACDwC,WAAW,EAAGvC,QAAQ,IAAK;MACzB2B,QAAQ,CAAC;QAAET,IAAI,EAAEZ,WAAW,CAACE,YAAY;QAAEW,OAAO,EAAEnB;MAAS,CAAC,CAAC;IACjE,CAAC;IACDwC,UAAU,EAAEA,CAAA,KAAM;MAChBb,QAAQ,CAAC;QAAET,IAAI,EAAEZ,WAAW,CAACG;MAAY,CAAC,CAAC;IAC7C,CAAC;IACDgC,eAAe,EAAGpB,YAAY,IAAK;MACjC,MAAMC,EAAE,GAAGoB,IAAI,CAACC,GAAG,CAAC,CAAC;MACrBhB,QAAQ,CAAC;QACPT,IAAI,EAAEZ,WAAW,CAACI,gBAAgB;QAClCS,OAAO,EAAE;UAAE,GAAGE,YAAY;UAAEC;QAAG;MACjC,CAAC,CAAC;MACF;MACAsB,UAAU,CAAC,MAAM;QACfjB,QAAQ,CAAC;UAAET,IAAI,EAAEZ,WAAW,CAACK,mBAAmB;UAAEQ,OAAO,EAAEG;QAAG,CAAC,CAAC;MAClE,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IACDuB,kBAAkB,EAAGvB,EAAE,IAAK;MAC1BK,QAAQ,CAAC;QAAET,IAAI,EAAEZ,WAAW,CAACK,mBAAmB;QAAEQ,OAAO,EAAEG;MAAG,CAAC,CAAC;IAClE,CAAC;IACDwB,OAAO,EAAG3C,IAAI,IAAK;MACjBwB,QAAQ,CAAC;QAAET,IAAI,EAAEZ,WAAW,CAACM,QAAQ;QAAEO,OAAO,EAAEhB;MAAK,CAAC,CAAC;IACzD,CAAC;IACD4C,UAAU,EAAG3C,OAAO,IAAK;MACvBuB,QAAQ,CAAC;QAAET,IAAI,EAAEZ,WAAW,CAACO,WAAW;QAAEM,OAAO,EAAEf;MAAQ,CAAC,CAAC;IAC/D,CAAC;IACD4C,QAAQ,EAAG3C,KAAK,IAAK;MACnBsB,QAAQ,CAAC;QAAET,IAAI,EAAEZ,WAAW,CAACQ,SAAS;QAAEK,OAAO,EAAEd;MAAM,CAAC,CAAC;IAC3D;EACF,CAAC;EAED,oBACER,OAAA,CAAC0B,UAAU,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAElC,KAAK;MAAEqB;IAAQ,CAAE;IAAAZ,QAAA,EAC5CA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;;AAED;AAAA5B,EAAA,CA7DaF,WAAW;AAAA+B,EAAA,GAAX/B,WAAW;AA8DxB,OAAO,MAAMgC,MAAM,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC1B,MAAMC,OAAO,GAAGjE,UAAU,CAAC8B,UAAU,CAAC;EACtC,IAAI,CAACmC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,MAAM;AAQnB,eAAejC,UAAU;AAAC,IAAAgC,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}